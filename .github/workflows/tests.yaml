name: Code Quality & Tests

permissions:
  contents: read
  pull-requests: read

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ci-${{ github.repository }}-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linting:
    runs-on: ubuntu-22.04
    outputs:
      success: ${{ steps.lint-check.outputs.success }}

    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: ./.github/actions/setup-uv-project

      - name: Get changed Python files
        id: changed-files
        uses: tj-actions/changed-files@v47
        with:
          files: |
            **/*.py
          files_ignore: |
            tests/**
      - name: Run ruff on changed Pruna code
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          src: ${{ steps.changed-files.outputs.all_changed_files }}

      - name: Run Ty type checker on Pruna code
        run: ty check src/pruna

      - name: Run docstring checks with pytest
        run: pytest -m "style"

      - name: Set lint check output
        id: lint-check
        run: echo "success=true" >> $GITHUB_OUTPUT

  test:
    runs-on: pruna-cpu

    strategy:
      matrix:
        python-version: ["3.10"]

    env:
      HF_ENDPOINT: https://hf-mirror.com
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      HF_HOME: ${{ github.workspace }}/.cache/huggingface
      HF_DATASETS_CACHE: ${{ github.workspace }}/.cache/huggingface/datasets

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: ./.github/actions/setup-uv-project

      - name: Cache Hugging Face datasets and models
        uses: actions/cache@v4
        with:
          path: |
            .cache/huggingface/datasets
            .cache/huggingface/hub
            .cache/huggingface/models
          key: hf-datasets-${{ runner.os }}-${{ hashFiles('tests/**/*.py') }}
          restore-keys: |
            hf-datasets-${{ runner.os }}-

      - name: Export HF token for subprocesses
        run: |
          echo "Exporting HUGGINGFACE_HUB_TOKEN so subprocesses inherit auth"
          echo "HUGGINGFACE_HUB_TOKEN=$HF_TOKEN" >> "$GITHUB_ENV"
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}

      - name: Clean incomplete Hugging Face cache files (if any)
        run: |
          echo "Removing any *.incomplete directories from HF caches..."
          set -eux
          # datasets incomplete folders
          if [ -d "${{ github.workspace }}/.cache/huggingface/datasets" ]; then
            find "${{ github.workspace }}/.cache/huggingface/datasets" -type d -name "*.incomplete" -prune -exec rm -rf {} + || true
          fi
          # hub incomplete folders
          if [ -d "${{ github.workspace }}/.cache/huggingface/hub" ]; then
            find "${{ github.workspace }}/.cache/huggingface/hub" -type d -name "*.incomplete" -prune -exec rm -rf {} + || true
          fi
          # models incomplete folders
          if [ -d "${{ github.workspace }}/.cache/huggingface/models" ]; then
            find "${{ github.workspace }}/.cache/huggingface/models" -type d -name "*.incomplete" -prune -exec rm -rf {} + || true
          fi

      - name: Set test worker count
        run: echo "PYTEST_WORKERS=$(( $(nproc) - 1 ))" >> "$GITHUB_ENV" # leave 1 for the system process

      - name: Run tests with retries
        run: |
          echo "Running tests with up to 3 retries using $PYTEST_WORKERS workers..."
          FAILED=0
          for i in 1 2 3; do
            echo "Attempt $i/3..."
            pytest -n $PYTEST_WORKERS -m "cpu and not slow and not high_cpu" && { FAILED=0; break; } || FAILED=1
            if [ "$FAILED" -eq 1 ] && [ "$i" -lt 3 ]; then
              echo "Attempt $i failed. Cleaning incomplete cache and retrying in 10s..."
              find "${{ github.workspace }}/.cache/huggingface" -type d -name "*.incomplete" -prune -exec rm -rf {} + || true
              sleep 10
            fi
          done
          if [ "$FAILED" -eq 1 ]; then
            echo "All 3 attempts failed â€” exiting with non-zero status."
            exit 1
          fi
